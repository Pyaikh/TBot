<?php

namespace App\Services;

use App\Models\Brand;
use App\Models\Color;
use App\Models\Order;
use App\Models\Shoe;
use App\Models\Size;
use App\Models\TelegramUser;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class TelegramService
{
    protected $botToken;
    protected $apiUrl = 'https://api.telegram.org/bot';
    protected $appUrl;

    public function __construct()
    {
        $this->botToken = env('TELEGRAM_BOT_TOKEN');
        $this->appUrl = env('APP_URL', 'http://localhost:8000');
    }

    public function handleUpdate($update)
    {
        if (isset($update['message'])) {
            return $this->handleMessage($update['message']);
        } elseif (isset($update['callback_query'])) {
            return $this->handleCallbackQuery($update['callback_query']);
        }
        
        return response()->json(['status' => 'success']);
    }

    protected function handleMessage($message)
    {
        $chatId = $message['chat']['id'];
        $text = $message['text'] ?? '';
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $user = $this->getOrCreateUser($message['chat']);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if ($text === '/start') {
            $user->update(['current_state' => 'start', 'temp_data' => null]);
            return $this->sendStartMessage($chatId);
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        switch ($user->current_state) {
            case 'waiting_address':
                return $this->handleAddressInput($user, $text);
            case 'waiting_entrance':
                return $this->handleEntranceInput($user, $text);
            case 'waiting_apartment':
                return $this->handleApartmentInput($user, $text);
            default:
                return $this->sendMessage($chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é:');
        }
    }
    
    protected function handleCallbackQuery($callbackQuery)
    {
        $chatId = $callbackQuery['from']['id'];
        $data = json_decode($callbackQuery['data'], true);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $user = TelegramUser::where('chat_id', $chatId)->firstOrFail();
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        switch ($data['action']) {
            case 'select_brand':
                return $this->handleBrandSelection($user, $data['id']);
            case 'select_shoe':
                return $this->handleShoeSelection($user, $data['id']);
            case 'select_size':
                return $this->handleSizeSelection($user, $data['id']);
            case 'select_color':
                return $this->handleColorSelection($user, $data['id']);
            case 'select_payment':
                return $this->handlePaymentSelection($user, $data['method']);
            default:
                return $this->sendMessage($chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        }
    }
    
    protected function getOrCreateUser($chat)
    {
        return TelegramUser::firstOrCreate(
            ['chat_id' => $chat['id']],
            [
                'username' => $chat['username'] ?? null,
                'first_name' => $chat['first_name'] ?? null,
                'last_name' => $chat['last_name'] ?? null,
                'current_state' => 'start'
            ]
        );
    }
    
    protected function sendStartMessage($chatId)
    {
        $brands = Brand::all();
        $keyboard = ['inline_keyboard' => []];
        
        foreach ($brands as $brand) {
            $keyboard['inline_keyboard'][] = [
                [
                    'text' => $brand->name,
                    'callback_data' => json_encode(['action' => 'select_brand', 'id' => $brand->id])
                ]
            ];
        }
        
        return $this->sendMessage(
            $chatId,
            'üëü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –æ–±—É–≤–∏! –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:',
            $keyboard
        );
    }
    
    protected function handleBrandSelection($user, $brandId)
    {
        $brand = Brand::findOrFail($brandId);
        $shoes = $brand->shoes;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $tempData = $user->temp_data ?? [];
        $tempData['brand_id'] = $brandId;
        $user->update(['temp_data' => $tempData, 'current_state' => 'selecting_shoe']);
        
        // –ï—Å–ª–∏ —É –±—Ä–µ–Ω–¥–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        if ($brand->image) {
            $this->sendPhoto($user->chat_id, $this->getImageUrl($brand->image));
        }
        
        $keyboard = ['inline_keyboard' => []];
        
        foreach ($shoes as $shoe) {
            $keyboard['inline_keyboard'][] = [
                [
                    'text' => $shoe->name . ' - ' . $shoe->price . ' —Ä—É–±.',
                    'callback_data' => json_encode(['action' => 'select_shoe', 'id' => $shoe->id])
                ]
            ];
        }
        
        return $this->sendMessage(
            $user->chat_id,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –±—Ä–µ–Ω–¥: {$brand->name}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
            $keyboard
        );
    }
    
    protected function handleShoeSelection($user, $shoeId)
    {
        $shoe = Shoe::findOrFail($shoeId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $tempData = $user->temp_data ?? [];
        $tempData['shoe_id'] = $shoeId;
        $user->update(['temp_data' => $tempData, 'current_state' => 'selecting_size']);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –æ–±—É–≤–∏
        if ($shoe->image) {
            $this->sendPhoto($user->chat_id, $this->getImageUrl($shoe->image), $shoe->description);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        $sizes = $shoe->sizes;
        $keyboard = ['inline_keyboard' => []];
        
        $row = [];
        foreach ($sizes as $index => $size) {
            $row[] = [
                'text' => $size->value,
                'callback_data' => json_encode(['action' => 'select_size', 'id' => $size->id])
            ];
            
            // –ü–æ 3 —Ä–∞–∑–º–µ—Ä–∞ –≤ —Ä—è–¥
            if (count($row) === 3 || $index === count($sizes) - 1) {
                $keyboard['inline_keyboard'][] = $row;
                $row = [];
            }
        }
        
        return $this->sendMessage(
            $user->chat_id,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: {$shoe->name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:",
            $keyboard
        );
    }
    
    protected function handleSizeSelection($user, $sizeId)
    {
        $size = Size::findOrFail($sizeId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $tempData = $user->temp_data ?? [];
        $tempData['size_id'] = $sizeId;
        $user->update(['temp_data' => $tempData, 'current_state' => 'selecting_color']);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞
        $shoe = Shoe::findOrFail($tempData['shoe_id']);
        $colors = $shoe->colors;
        
        $keyboard = ['inline_keyboard' => []];
        
        foreach ($colors as $color) {
            $keyboard['inline_keyboard'][] = [
                [
                    'text' => $color->name,
                    'callback_data' => json_encode(['action' => 'select_color', 'id' => $color->id])
                ]
            ];
        }
        
        return $this->sendMessage(
            $user->chat_id,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–º–µ—Ä: {$size->value}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:",
            $keyboard
        );
    }
    
    protected function handleColorSelection($user, $colorId)
    {
        $color = Color::findOrFail($colorId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $tempData = $user->temp_data ?? [];
        $tempData['color_id'] = $colorId;
        $user->update(['temp_data' => $tempData, 'current_state' => 'waiting_address']);
        
        return $this->sendMessage(
            $user->chat_id,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–≤–µ—Ç: {$color->name}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
        );
    }
    
    protected function handleAddressInput($user, $address)
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $tempData = $user->temp_data ?? [];
        $tempData['address'] = $address;
        $user->update(['temp_data' => $tempData, 'current_state' => 'waiting_entrance']);
        
        return $this->sendMessage(
            $user->chat_id,
            "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {$address}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞:"
        );
    }
    
    protected function handleEntranceInput($user, $entrance)
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $tempData = $user->temp_data ?? [];
        $tempData['entrance'] = $entrance;
        $user->update(['temp_data' => $tempData, 'current_state' => 'waiting_apartment']);
        
        return $this->sendMessage(
            $user->chat_id,
            "–ù–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞: {$entrance}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:"
        );
    }
    
    protected function handleApartmentInput($user, $apartment)
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $tempData = $user->temp_data ?? [];
        $tempData['apartment'] = $apartment;
        $user->update(['temp_data' => $tempData, 'current_state' => 'selecting_payment']);
        
        $keyboard = ['inline_keyboard' => [
            [
                ['text' => '–ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π', 'callback_data' => json_encode(['action' => 'select_payment', 'method' => 'card'])],
            ],
            [
                ['text' => '–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É', 'callback_data' => json_encode(['action' => 'select_payment', 'method' => 'cash'])],
            ]
        ]];
        
        return $this->sendMessage(
            $user->chat_id,
            "–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã: {$apartment}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            $keyboard
        );
    }
    
    protected function handlePaymentSelection($user, $paymentMethod)
    {
        $tempData = $user->temp_data;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        $order = Order::create([
            'chat_id' => $user->chat_id,
            'shoe_id' => $tempData['shoe_id'],
            'color_id' => $tempData['color_id'],
            'size_id' => $tempData['size_id'],
            'address' => $tempData['address'],
            'entrance' => $tempData['entrance'],
            'apartment' => $tempData['apartment'],
            'payment_method' => $paymentMethod,
            'status' => 'pending'
        ]);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $user->update(['current_state' => 'start', 'temp_data' => null]);
        
        $paymentText = $paymentMethod === 'card' ? '–±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π' : '–Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        $shoe = Shoe::find($tempData['shoe_id']);
        $color = Color::find($tempData['color_id']);
        $size = Size::find($tempData['size_id']);
        
        $message = "‚úÖ –ó–∞–∫–∞–∑ #{$order->id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            . "–ú–æ–¥–µ–ª—å: {$shoe->name}\n"
            . "–¶–≤–µ—Ç: {$color->name}\n"
            . "–†–∞–∑–º–µ—Ä: {$size->value}\n"
            . "–¶–µ–Ω–∞: {$shoe->price} —Ä—É–±.\n\n"
            . "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {$tempData['address']}, –ø–æ–¥—ä–µ–∑–¥ {$tempData['entrance']}, –∫–≤. {$tempData['apartment']}\n"
            . "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {$paymentText}\n\n"
            . "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.";
        
        $this->sendMessage($user->chat_id, $message);
        
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        return $this->sendStartMessage($user->chat_id);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    protected function getImageUrl($imagePath)
    {
        // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —É–∂–µ URL
        if (strpos($imagePath, 'http') === 0) {
            return $imagePath;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (brands –∏–ª–∏ shoes)
        $category = strtok($imagePath, '/');
        $filename = substr($imagePath, strpos($imagePath, '/') + 1);
        
        return $this->appUrl . '/images/' . $category . '/' . $filename;
    }
    
    public function sendMessage($chatId, $text, $keyboard = null)
    {
        $data = [
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML'
        ];
        
        if ($keyboard) {
            $data['reply_markup'] = json_encode($keyboard);
        }
        
        try {
            $response = Http::post($this->apiUrl . $this->botToken . '/sendMessage', $data);
            return response()->json(['status' => 'success', 'response' => $response->json()]);
        } catch (\Exception $e) {
            Log::error('Failed to send message to Telegram: ' . $e->getMessage());
            return response()->json(['status' => 'error', 'message' => $e->getMessage()], 500);
        }
    }
    
    public function sendPhoto($chatId, $photo, $caption = null, $keyboard = null)
    {
        $data = [
            'chat_id' => $chatId,
            'photo' => $photo,
            'parse_mode' => 'HTML'
        ];
        
        if ($caption) {
            $data['caption'] = $caption;
        }
        
        if ($keyboard) {
            $data['reply_markup'] = json_encode($keyboard);
        }
        
        try {
            $response = Http::post($this->apiUrl . $this->botToken . '/sendPhoto', $data);
            return response()->json(['status' => 'success', 'response' => $response->json()]);
        } catch (\Exception $e) {
            Log::error('Failed to send photo to Telegram: ' . $e->getMessage());
            return response()->json(['status' => 'error', 'message' => $e->getMessage()], 500);
        }
    }
} 